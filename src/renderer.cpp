#include "renderer.h"
#include <iostream>
#include <sstream>
#include <cstring>

Renderer::Renderer(int width, int height, const std::string& title)
    : window_(nullptr), sdl_renderer_(nullptr), texture_(nullptr),
      width_(width), height_(height), running_(false), initialized_(false) {
    pixel_buffer_.resize(width * height);
}

Renderer::~Renderer() {
    shutdown();
}

bool Renderer::initialize() {
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        std::cerr << "SDL initialization failed: " << SDL_GetError() << std::endl;
        return false;
    }
    
    window_ = SDL_CreateWindow("Almond Benchmark by JxThxNxs",
                              SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,
                              width_, height_, SDL_WINDOW_SHOWN);
    
    if (!window_) {
        std::cerr << "Window creation failed: " << SDL_GetError() << std::endl;
        return false;
    }
    
    sdl_renderer_ = SDL_CreateRenderer(window_, -1, SDL_RENDERER_ACCELERATED);
    if (!sdl_renderer_) {
        std::cerr << "Renderer creation failed: " << SDL_GetError() << std::endl;
        return false;
    }
    
    texture_ = SDL_CreateTexture(sdl_renderer_, SDL_PIXELFORMAT_ARGB8888,
                                SDL_TEXTUREACCESS_STREAMING, width_, height_);
    
    if (!texture_) {
        std::cerr << "Texture creation failed: " << SDL_GetError() << std::endl;
        return false;
    }
    
    running_ = true;
    initialized_ = true;
    return true;
}

void Renderer::shutdown() {
    if (texture_) {
        SDL_DestroyTexture(texture_);
        texture_ = nullptr;
    }
    
    if (sdl_renderer_) {
        SDL_DestroyRenderer(sdl_renderer_);
        sdl_renderer_ = nullptr;
    }
    
    if (window_) {
        SDL_DestroyWindow(window_);
        window_ = nullptr;
    }
    
    if (initialized_) {
        SDL_Quit();
        initialized_ = false;
    }
}

void Renderer::clear() {
    std::fill(pixel_buffer_.begin(), pixel_buffer_.end(), 0xFF000000); // Black with alpha
}

void Renderer::present() {
    void* pixels;
    int pitch;
    
    SDL_LockTexture(texture_, nullptr, &pixels, &pitch);
    std::memcpy(pixels, pixel_buffer_.data(), pixel_buffer_.size() * sizeof(uint32_t));
    SDL_UnlockTexture(texture_);
    
    SDL_RenderClear(sdl_renderer_);
    SDL_RenderCopy(sdl_renderer_, texture_, nullptr, nullptr);
    SDL_RenderPresent(sdl_renderer_);
}

void Renderer::setPixel(int x, int y, const Color& color) {
    if (x >= 0 && x < width_ && y >= 0 && y < height_) {
        uint32_t pixel = (color.a << 24) | (color.r << 16) | (color.g << 8) | color.b;
        pixel_buffer_[y * width_ + x] = pixel;
    }
}

void Renderer::renderMandelbrot(const std::vector<int>& iterations, const MandelbrotParams& params, const ColorPalette& palette) {
    for (int y = 0; y < height_; ++y) {
        for (int x = 0; x < width_; ++x) {
            int iter = iterations[y * width_ + x];
            Color color = palette.getColor(iter, params.max_iterations);
            setPixel(x, y, color);
        }
    }
}

void Renderer::renderChar(char c, int x, int y, const Color& color) {
    // Complete 8x8 bitmap font
    static const uint8_t font_data[128][8] = {
        // 0-31: Control characters (all blank)
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 0
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 1
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 2
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 3
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 4
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 5
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 6
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 7
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 8
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 9
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 10
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 11
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 12
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 13
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 14
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 15
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 16
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 17
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 18
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 19
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 20
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 21
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 22
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 23
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 24
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 25
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 26
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 27
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 28
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 29
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 30
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 31
        // 32: Space
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 32 ' '
        // 33-47: Punctuation
        {0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x18, 0x00}, // 33 '!'
        {0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00}, // 34 '"'
        {0x66, 0x66, 0xFF, 0x66, 0xFF, 0x66, 0x66, 0x00}, // 35 '#'
        {0x18, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x18, 0x00}, // 36 '$'
        {0x62, 0x66, 0x0C, 0x18, 0x30, 0x66, 0x46, 0x00}, // 37 '%'
        {0x3C, 0x66, 0x3C, 0x38, 0x67, 0x66, 0x3F, 0x00}, // 38 '&'
        {0x06, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00}, // 39 '''
        {0x0C, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00}, // 40 '('
        {0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00}, // 41 ')'
        {0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00}, // 42 '*'
        {0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00}, // 43 '+'
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30}, // 44 ','
        {0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00}, // 45 '-'
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00}, // 46 '.'
        {0x00, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00}, // 47 '/'
        // 48-57: Numbers
        {0x3C, 0x66, 0x6E, 0x76, 0x66, 0x66, 0x3C, 0x00}, // 48 '0'
        {0x18, 0x18, 0x38, 0x18, 0x18, 0x18, 0x7E, 0x00}, // 49 '1'
        {0x3C, 0x66, 0x06, 0x0C, 0x30, 0x60, 0x7E, 0x00}, // 50 '2'
        {0x3C, 0x66, 0x06, 0x1C, 0x06, 0x66, 0x3C, 0x00}, // 51 '3'
        {0x06, 0x0E, 0x1E, 0x66, 0x7F, 0x06, 0x06, 0x00}, // 52 '4'
        {0x7E, 0x60, 0x7C, 0x06, 0x06, 0x66, 0x3C, 0x00}, // 53 '5'
        {0x3C, 0x66, 0x60, 0x7C, 0x66, 0x66, 0x3C, 0x00}, // 54 '6'
        {0x7E, 0x66, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x00}, // 55 '7'
        {0x3C, 0x66, 0x66, 0x3C, 0x66, 0x66, 0x3C, 0x00}, // 56 '8'
        {0x3C, 0x66, 0x66, 0x3E, 0x06, 0x66, 0x3C, 0x00}, // 57 '9'
        // 58-64: More punctuation
        {0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00}, // 58 ':'
        {0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30}, // 59 ';'
        {0x0E, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0E, 0x00}, // 60 '<'
        {0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00}, // 61 '='
        {0x70, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x70, 0x00}, // 62 '>'
        {0x3C, 0x66, 0x06, 0x0C, 0x18, 0x00, 0x18, 0x00}, // 63 '?'
        {0x3C, 0x66, 0x6E, 0x6E, 0x60, 0x62, 0x3C, 0x00}, // 64 '@'
        // 65-90: Uppercase letters
        {0x18, 0x3C, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00}, // 65 'A'
        {0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00}, // 66 'B'
        {0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00}, // 67 'C'
        {0x78, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x00}, // 68 'D'
        {0x7E, 0x60, 0x60, 0x78, 0x60, 0x60, 0x7E, 0x00}, // 69 'E'
        {0x7E, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x00}, // 70 'F'
        {0x3C, 0x66, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x00}, // 71 'G'
        {0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00}, // 72 'H'
        {0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00}, // 73 'I'
        {0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x6C, 0x38, 0x00}, // 74 'J'
        {0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66, 0x00}, // 75 'K'
        {0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00}, // 76 'L'
        {0x63, 0x77, 0x7F, 0x6B, 0x63, 0x63, 0x63, 0x00}, // 77 'M'
        {0x66, 0x76, 0x7E, 0x7E, 0x6E, 0x66, 0x66, 0x00}, // 78 'N'
        {0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00}, // 79 'O'
        {0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00}, // 80 'P'
        {0x3C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0E, 0x00}, // 81 'Q'
        {0x7C, 0x66, 0x66, 0x7C, 0x78, 0x6C, 0x66, 0x00}, // 82 'R'
        {0x3C, 0x66, 0x60, 0x3C, 0x06, 0x66, 0x3C, 0x00}, // 83 'S'
        {0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00}, // 84 'T'
        {0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00}, // 85 'U'
        {0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00}, // 86 'V'
        {0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00}, // 87 'W'
        {0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00}, // 88 'X'
        {0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x00}, // 89 'Y'
        {0x7E, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x7E, 0x00}, // 90 'Z'
        // 91-96: More punctuation
        {0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00}, // 91 '['
        {0x00, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x00}, // 92 '\'
        {0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00}, // 93 ']'
        {0x18, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00}, // 94 '^'
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF}, // 95 '_'
        {0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00}, // 96 '`'
        // 97-122: Lowercase letters
        {0x00, 0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00}, // 97 'a'
        {0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x00}, // 98 'b'
        {0x00, 0x00, 0x3C, 0x60, 0x60, 0x60, 0x3C, 0x00}, // 99 'c'
        {0x06, 0x06, 0x3E, 0x66, 0x66, 0x66, 0x3E, 0x00}, // 100 'd'
        {0x00, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00}, // 101 'e'
        {0x0E, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x18, 0x00}, // 102 'f'
        {0x00, 0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x7C}, // 103 'g'
        {0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00}, // 104 'h'
        {0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00}, // 105 'i'
        {0x06, 0x00, 0x0E, 0x06, 0x06, 0x06, 0x66, 0x3C}, // 106 'j'
        {0x60, 0x60, 0x6C, 0x78, 0x78, 0x6C, 0x66, 0x00}, // 107 'k'
        {0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00}, // 108 'l'
        {0x00, 0x00, 0x77, 0x7F, 0x6B, 0x63, 0x63, 0x00}, // 109 'm'
        {0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00}, // 110 'n'
        {0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00}, // 111 'o'
        {0x00, 0x00, 0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60}, // 112 'p'
        {0x00, 0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x06}, // 113 'q'
        {0x00, 0x00, 0x7C, 0x66, 0x60, 0x60, 0x60, 0x00}, // 114 'r'
        {0x00, 0x00, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x00}, // 115 's'
        {0x18, 0x18, 0x7E, 0x18, 0x18, 0x18, 0x0E, 0x00}, // 116 't'
        {0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00}, // 117 'u'
        {0x00, 0x00, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00}, // 118 'v'
        {0x00, 0x00, 0x63, 0x6B, 0x7F, 0x3E, 0x36, 0x00}, // 119 'w'
        {0x00, 0x00, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x00}, // 120 'x'
        {0x00, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x0C, 0x78}, // 121 'y'
        {0x00, 0x00, 0x7E, 0x0C, 0x18, 0x30, 0x7E, 0x00}, // 122 'z'
        // 123-127: Final punctuation
        {0x0E, 0x18, 0x18, 0x70, 0x18, 0x18, 0x0E, 0x00}, // 123 '{'
        {0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00}, // 124 '|'
        {0x70, 0x18, 0x18, 0x0E, 0x18, 0x18, 0x70, 0x00}, // 125 '}'
        {0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 126 '~'
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}  // 127 DEL
    };
    
    if (c >= 0 && c < 128) {
        for (int row = 0; row < 8; ++row) {
            uint8_t line = font_data[c][row];
            for (int col = 0; col < 8; ++col) {
                if (line & (0x80 >> col)) {
                    setPixel(x + col, y + row, color);
                }
            }
        }
    }
}

void Renderer::renderText(const std::string& text, int x, int y, Color color) {
    int current_x = x;
    for (char c : text) {
        renderChar(c, current_x, y, color);
        current_x += 8; // Character width
    }
}

void Renderer::renderFPSCounter(const FPSCounter& fps_counter) {
    std::string fps_text = fps_counter.getStatsString();
    renderText(fps_text, 10, 10, Color(255, 255, 0)); // Yellow text
}

void Renderer::renderBenchmarkInfo(double single_thread_time, double multi_thread_time, int thread_count) {
    std::ostringstream oss;
    
    // Show benchmark results
    oss << "Single: " << static_cast<int>(single_thread_time) << "ms";
    renderText(oss.str(), 10, height_ - 75, Color(255, 255, 255));
    
    oss.str("");
    oss << "Multi (" << thread_count << "): " << static_cast<int>(multi_thread_time) << "ms";
    renderText(oss.str(), 10, height_ - 60, Color(255, 255, 255));
    
    if (single_thread_time > 0 && multi_thread_time > 0) {
        double speedup = single_thread_time / multi_thread_time;
        oss.str("");
        oss << "Speedup: " << static_cast<int>(speedup * 100) / 100.0 << "x";
        renderText(oss.str(), 10, height_ - 45, Color(0, 255, 0));
        
        // Calculate and show Almond Score
        double efficiency = speedup / thread_count;
        double base_score = 10000.0 / multi_thread_time;
        double efficiency_bonus = efficiency * 1000.0;
        int almond_score = static_cast<int>(base_score + efficiency_bonus);
        
        oss.str("");
        oss << "ALMOND SCORE: " << almond_score;
        renderText(oss.str(), 10, height_ - 30, Color(255, 215, 0)); // Gold color
        
        // Show rating
        std::string rating;
        if (almond_score >= 500) rating = "EXCELLENT!";
        else if (almond_score >= 300) rating = "VERY GOOD";
        else if (almond_score >= 200) rating = "GOOD";
        else if (almond_score >= 100) rating = "AVERAGE";
        else rating = "POOR";
        
        renderText(rating, 10, height_ - 15, Color(255, 100, 255)); // Pink color
    }
    
    // Show branding
    renderText("Almond Benchmark by JxThxNxs", width_ - 250, height_ - 15, Color(128, 128, 128));
}
